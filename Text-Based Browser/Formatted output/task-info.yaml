type: edu
custom_name: stage6
files:
- name: browser/browser.py
  visible: true
  text: "\nnytimes_com = '''\nThis New Liquid Is Magnetic, and Mesmerizing\n\nScientists\
    \ have created “soft” magnets that can flow \nand change shape, and that could\
    \ be a boon to medicine \nand robotics. (Source: New York Times)\n\n\nMost Wikipedia\
    \ Profiles Are of Men. This Scientist Is Changing That.\n\nJessica Wade has added\
    \ nearly 700 Wikipedia biographies for\n important female and minority scientists\
    \ in less than two \n years.\n\n'''\n\nbloomberg_com = '''\nThe Space Race: From\
    \ Apollo 11 to Elon Musk\n\nIt's 50 years since the world was gripped by historic\
    \ images\n of Apollo 11, and Neil Armstrong -- the first man to walk \n on the\
    \ moon. It was the height of the Cold War, and the charts\n were filled with David\
    \ Bowie's Space Oddity, and Creedence's \n Bad Moon Rising. The world is a very\
    \ different place than \n it was 5 decades ago. But how has the space race changed\
    \ since\n the summer of '69? (Source: Bloomberg)\n\n\nTwitter CEO Jack Dorsey\
    \ Gives Talk at Apple Headquarters\n\nTwitter and Square Chief Executive Officer\
    \ Jack Dorsey \n addressed Apple Inc. employees at the iPhone maker’s headquarters\n\
    \ Tuesday, a signal of the strong ties between the Silicon Valley giants.\n'''\n\
    \n# write your code here\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    from colorama import Fore

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='2.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='en.wikipedia.org\nwiki\nexit',
                    attach='Wikipedia',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> int:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    try:
                        content = tab.read()
                    except UnicodeDecodeError:
                        return -1

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return 1

            return 0

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked whether URL was correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                check_files_result = self._check_files(path_for_tabs, right_word)
                if not check_files_result:
                    return CheckResult.wrong('There are no correct saved tabs')
                elif check_files_result == -1:
                    return CheckResult.wrong('An error occurred while reading your saved tab. '
                                             'Perhaps you used the wrong encoding?')

                try:
                    shutil.rmtree(path_for_tabs)
                except PermissionError:
                    return CheckResult.wrong("Impossible to remove the directory for tabs. Perhaps you haven't closed some file?")

                if not Fore.BLUE in reply:
                    return CheckResult.wrong('There are no blue refs in output')

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser copy.py
  visible: true
  text: "import argparse\nimport os\nfrom collections import deque\nimport requests\n\
    from bs4 import BeautifulSoup\n\n\nnytimes_com = '''\nThis New Liquid Is Magnetic,\
    \ and Mesmerizing\n\nScientists have created “soft” magnets that can flow \nand\
    \ change shape, and that could be a boon to medicine \nand robotics. (Source:\
    \ New York Times)\n\n\nMost Wikipedia Profiles Are of Men. This Scientist Is Changing\
    \ That.\n\nJessica Wade has added nearly 700 Wikipedia biographies for\n important\
    \ female and minority scientists in less than two \n years.\n\n'''\n\nbloomberg_com\
    \ = '''The Space Race: From Apollo 11 to Elon Musk\n\nIt's 50 years since the\
    \ world was gripped by historic images\n of Apollo 11, and Neil Armstrong -- the\
    \ first man to walk \n on the moon. It was the height of the Cold War, and the\
    \ charts\n were filled with David Bowie's Space Oddity, and Creedence's \n Bad\
    \ Moon Rising. The world is a very different place than \n it was 5 decades ago.\
    \ But how has the space race changed since\n the summer of '69? (Source: Bloomberg)\n\
    \n\nTwitter CEO Jack Dorsey Gives Talk at Apple Headquarters\n\nTwitter and Square\
    \ Chief Executive Officer Jack Dorsey \n addressed Apple Inc. employees at the\
    \ iPhone maker’s headquarters\n Tuesday, a signal of the strong ties between the\
    \ Silicon Valley giants.\n'''\n\n\ntwo_pages = ['bloomberg.com', 'nytimes.com']\n\
    parser = argparse.ArgumentParser()\nparser.add_argument(\"dir\")  # dir=saved_files\n\
    args = parser.parse_args()  # read the argument: 'saved_files'\nmy_history = deque()\n\
    \nif not os.access(args.dir, os.F_OK):\n    os.mkdir(args.dir)  # create directory:\
    \ 'saved_files'\n\ncurrent_page = ''\nwhile True:\n    file_list = os.listdir(args.dir)\n\
    \    url = input()\n    try:\n        r = requests.get(url)\n    except requests.exceptions.ConnectionError:\n\
    \        print('Error: Incorrect URL')\n    else:\n        soup = BeautifulSoup(r.content,\
    \ 'html.parser')\n        if url == 'exit':\n            break\n        elif url\
    \ not in file_list and url != 'back':\n            print('Error: Incorrect URL')\n\
    \        elif url in two_pages:\n            file_path = os.path.join(args.dir,\
    \ url.strip('.com'))\n            file_write = open(file_path, 'w', encoding='utf-8')\n\
    \            response = requests.get('https://' + url).text\n            if url\
    \ == 'bloomberg.com':\n                print(response)\n                current_page\
    \ = 'bloomberg.com'\n                my_history.append('bloomberg')\n        \
    \        file_write.write(response)\n                file_write.close()\n    \
    \        else:\n                print(response)\n                current_page\
    \ = 'nytimes.com'\n                my_history.append('nytimes')\n            \
    \    file_write.write(response)\n                file_write.close()\n        elif\
    \ url == 'back':\n            if len(my_history) != 0:\n                back_page\
    \ = my_history.pop()\n                if back_page not in current_page:\n    \
    \                with open(os.path.join(args.dir, back_page), 'r', encoding='utf-8')\
    \ as read_history:\n                        print(read_history.read())\n     \
    \           else:\n                    with open(os.path.join(args.dir, my_history.pop()),\
    \ 'r', encoding='utf-8') as read_history:\n                        print(read_history.read())\n\
    \        elif url in file_list:\n            file_read = open(os.path.join(args.dir,\
    \ url), 'r', encoding='utf-8')\n            print(file_read.read())\n        \
    \    file_read.close()\n"
  learner_created: true
- name: browser/__init__.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/441/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 30 Jan 2021 19:38:47 UTC
record: -1
